generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id         String    @id @unique @default(uuid())
  google_id  String
  first_name String
  last_name  String
  email      String    @unique
  birthday   DateTime?
  gender     String?
  createdAt  DateTime  @default(now())
  profile    Profile?

  @@map("users")
}

model Profile {
  id          Int       @id @default(autoincrement())
  username    String?   @unique
  image_url   String
  defaultCity String?
  level       Int       @default(0)
  experience  Float     @default(0)
  ratings     Json
  user_id     String    @unique
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  comments    Comment[]
  reports     Report[]
}

model Report {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  address            String
  coordinates        Decimal[]
  tags               Json
  suggestion         String
  hasTrashBins       Boolean   @default(true)
  images_urls        String[]
  images_deleteHashs String[]
  note1              Int       @default(0)
  note2              Int       @default(0)
  note3              Int       @default(0)
  note4              Int       @default(0)
  note5              Int       @default(0)
  resolved           Boolean   @default(false)
  approved           Boolean   @default(false)
  profile_id         Int?
  profile            Profile?  @relation(fields: [profile_id], references: [id])
  comments           Comment[]

  @@map("reports")
}

model Comment {
  id         Int       @id @default(autoincrement())
  content    String
  createdAt  DateTime  @default(now())
  profile_id Int
  report_id  Int
  parent_id  Int?
  parent     Comment?  @relation("Comment_Children", fields: [parent_id], references: [id])
  profile    Profile   @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  report     Report    @relation(fields: [report_id], references: [id], onDelete: Cascade)
  Children   Comment[] @relation("Comment_Children")

  @@map("comments")
}
